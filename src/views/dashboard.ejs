<!DOCTYPE html>
<html>
<head>

    <!-- <img src="{% static 'images/favicon.png' %}" style="width: 50px; height: 50px;">
     -->
    <title>LGIR: Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Biryani&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    
    <!-- Linking static CSS -->
    <link rel="stylesheet" href="static/css/generics/main.css" type="text/css">
    <link rel="icon" href="static/images/favicon.png" sizes="16x16" type="image/png">

</head>
<style>

#main {
    margin: 10px;
}

#project-tiles {
    margin-top: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
    text-align:center;
    color: #FFFFFF;
    gap: 11px;
    overflow: none;
}

#page-header {
    display: grid;
    gap: 11px;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
}

@media screen and (max-width: 1800px) {

    #project-tiles {
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }
}

@media screen and (max-width: 1250px) {

    #project-tiles {
        grid-template-columns: 1fr 1fr 1fr;
    }

}

@media screen and (max-width: 1000px) {

    #project-tiles {
        grid-template-columns: 1fr 1fr;
    }

}

@media screen and (max-width: 600px) {

    #project-tiles {
        grid-template-columns: 1fr;
    }

}

.project {
    user-select: none;
    display: grid;
    grid-template-areas:
    "project__colour project__colour project__colour project__colour project__colour project__colour"
    "project__name project__name project__name project__name project__name project__name"
    "project__users project__users project__users project__modified project__modified project__modified"
    "project__space-left project__workspace project__workspace project__workspace project__workspace project__space-right"
    "project__space-left project__settings project__settings project__settings project__remove project__space-right";
    padding-bottom: 30px;
}

.placeholder-tile {
    user-select: none;
    display: grid;
    grid-template-areas:
    "tile__colour-top tile__colour-top tile__colour-top"
    "tile__colour-left tile__center tile__colour-right"
    "tile__colour-bottom tile__colour-bottom tile__colour-bottom";
    grid-template-rows: 10px 223px 10px;
    grid-template-columns:  10px auto 10px;
}

.tile__colour-top {
    grid-area: tile__colour-top;
}

.tile__center {
    grid-area: tile__center;
    text-align: center;
}

.tile__center h2 {
    margin-top: 60px;
}

.tile__colour-left {
    grid-area: tile__colour-left;
}

.tile__colour-right {
    grid-area: tile__colour-right;
}

.tile__colour-bottom {
    grid-area: tile__colour-bottom;
}

#create-project-tile {
    font-size: 1.5em;
    transition: 0.5s;
    background-color: #242424;
    line-height: 190px;
}

#create-project-tile:hover {
    background-color: #181818;
    cursor: pointer;
    transition: 0.5s;
}

.tile {
    box-shadow: 10px 10px 15px #000000;
    transition: 0.5s;
    text-decoration: none;
    color: #FFFFFF;
}

.tile:hover {
    background-color: #181818;

    cursor: pointer;
    transition: 0.5s;
}


.project__name {
    grid-area: project__name;
    margin-top: 20px;
    font-size: 1.6em;
    margin-bottom: 10px;
}

.project__workspace {
    grid-area: project__workspace;
    margin-top: 15px;
    margin-bottom: 5px;
    font-size: 1.1em;
}


.project__colour {
    grid-area: project__colour;
    height: 10px;
}

.project__space-left {
    grid-area: project__space-left;
    width: 0px;
}

.project__space-right {
    grid-area: project__space-right;
    width: 0px;
}

.project__users {
    grid-area: project__users;
}

.project__modified {
    grid-area: project__modified;
}

.project__button {
    text-decoration: none;
    background-color: #424242;
    color: #FFFFFF;
    transition: 0.5s;
    padding: 5px;
}

.project__workspace:hover {
    background-color: #616161;
}

.project__remove:hover {
    background-color: var(--red);
}


.project__settings:hover {
    background-color: var(--blue);
}

.project__settings {
    grid-area: project__settings;
}

.project__remove {
    grid-area: project__remove;
    cursor: pointer;
    margin-left: 5px;
}

#dashboard_nav {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #555555;
}

#dashboard_nav li {
    float: left;
}

#dashboard_nav li:hover {
    background-color: #222222;
}

#dashboard_nav li a {
    text-decoration: none;
    color: #FFFFFF;
    text-align: center;
    padding: 15px;
    display: block;
    cursor: pointer;
}


.hide {
    display: none;
}

.message {
    text-align: center;
    display: none;
    margin-top: 50px;
}

.message h1 {
    font-size: 2.2em;
}

#progress-bar {
    height: 10px;
}

#progress-bar div {
    height: 100%;
    position: relative;
    overflow: hidden;
    display: none;
}

@keyframes move {
    0% {
        background-position: 0px;
    }
    100% {
        background-position: 2000px;
    }
}

#progress-image:after {
    height: 10px;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 5;
    animation: move 3s linear;
    content: "";
    background-size: 2000px;
    background-image:
    linear-gradient(to right,
        var(--teal) 0 400px,
        var(--grey) 0 500px,
        var(--orange) 0 900px,
        var(--grey) 0 1000px,
        var(--teal) 0 1400px,
        var(--grey) 0 1500px,
        var(--pink) 0 1900px,
        var(--grey) 0 2000px
    );
}


#review-button {
    background-color: #008674;
}

#review-button:hover {
    background-color: #00685a;
}

#review-area {
    display: none;
    color: #FFFFFF;
    position: absolute;
    top: 58px;
    left: 0px;
    bottom: 0px;
    right: 0px;

    background-color: #000000ec;
    text-align: center;
}

#review-area #question-grid {
    display: grid;
    grid-template-columns: auto auto auto;
}


#review-area h2 {
    font-weight: 400;
    margin-bottom: 30px;
}

#review-area p:nth-of-type(1) {
    font-size: 1.1em;
}

#review-area p:nth-of-type(2) {
    margin-top: 5px;
    font-size: 1.4em;
    margin-bottom: 20px;
}


.slider-container .slider {
  -webkit-appearance: none; 
  width: 400px;
  height: 25px;
  background: #2b2b2b;
}


.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 60px;
  height: 25px; 
  background-color: turquoise;
  cursor: pointer;
}

#review-area-additional {
    margin-top: 50px;
    background-color: #2b2b2b;
    outline: none;
    border: none;
    height: 45px;
    color: #FFFFFF;
    font-size: 1.2em;
    padding: 0px 10px;
}

#review-area a {
    background-color: rgb(0, 133, 143);
    padding: 9px;
    padding-bottom: 8px;
    cursor: pointer;
}

#review-area a:hover {
    background-color: rgb(0, 105, 119);
}


#review-area-additional::placeholder {
    text-align: center;
}




</style>
<body>



        
    <script>
     


    </script>

    <!-- Defining the top navigation bar -->
    <ul id="top_nav">
        <li><a class="ignore-link" style="cursor: default">LGIR</a></li>
        <li><a class="active-link" style="padding-bottom: 10px;">Dashboard</a></li>
        <li class="project-specific"><a id="show-live-button">Show Live Projects</a></li>
        <li class="project-specific"><a id="create-project-button">Create Project</a></li>
        <li class="project-specific"><input id="project-join-input" type="text" value="Join Project with Code"></li>
        <li class="project-specific"><input id="project-search-input" style="width: 200px;" type="text" value="Search Projects"></li>
        <li style="display: none"><a id="review-button">Leave Feedback</a></li>
        <li style="float:right"><a href="logout">Logout <%= username %></a></li>
    </ul>

    <div id="progress-bar">
        <div id="progress-image"></div>
    </div>

    <!-- Defining the main body of the page  -->
    <div id = "main">

        <div id="review-area">

            <h1 id="review-area-title">Dashboard Page Feedback</h1>
            <h2>On a scale of 0 to 10, how would you rate the page on the following topics?</h2>
            <div id="question-grid">
                <div class="text" id="q1text"></div>
                <div class="slider-container">
                    <p>Question 1</p>
                    <input type="range" min="0" max="10" value="5" class="slider" id="q1slider">
                    <p id="q1output">5</p>
                </div>
                <div></div>

                <div class="text" id="q2text"></div>
                <div class="slider-container">
                    <p>Question 2</p>
                    <input type="range" min="0" max="10" value="5" class="slider" id="q2slider">
                    <p id="q2output">5</p>
                </div>
                <div></div>

                <div class="text" id="q3text"></div>
                <div class="slider-container">
                    <p>Question 3</p>
                    <input type="range" min="0" max="10" value="5" class="slider" id="q3slider">
                    <p id="q3output">5</p>
                </div>
                <div></div>
            </div>
            <input placeholder="Extra Text Feedback" id="review-area-additional">
            <a id="feedback-send-button">Send Feedback</a>
    
        </div>

        <div id="project-tiles"></div>
        <div id="search-message" class="message">
            <h1>There aren't any matches for that search</h1>
            <h2>Are you sure you typed the project name correctly?</h2>
        </div>
        <div id="server-message" class="message">
            <h1>We've lost connection to the server</h1>
            <h2>We'll let you know when the connection's back</h2>
        </div>
        <div id="no-projects-message" class="message">
            <h1>You're not in any projects yet</h1>
            <h2>Use the create project button to make a new one</h2>
        </div>
    </div>
    
<script>

    //Creating a websocket connection to the server
    
    var authToken =  "<%= token %>"
    var socket = io()

    socket.emit("authenticate", {
        "token" : authToken
    })



    var reviewArea = document.getElementById("review-area")
    var reviewButton = document.getElementById("review-button")
    var reviewAreaStatus = false

    var feedbackSendButton = document.getElementById("feedback-send-button")
  

    reviewButton.addEventListener("click", function(){
        
        if (reviewAreaStatus) {
            reviewAreaStatus = false
            reviewButton.textContent = "Leave Feedback"
            reviewArea.style.display = "none"
        }
        else {
            reviewAreaStatus = true
            reviewButton.textContent = "Close Feedback"
            reviewArea.style.display = "block"
        }
    })


    var q1slider = document.getElementById("q1slider")
    var q2slider = document.getElementById("q2slider")
    var q3slider = document.getElementById("q3slider")

    var q1Output = document.getElementById("q1output")
    var q2Output = document.getElementById("q2output")
    var q3Output = document.getElementById("q3output")
    
    var additionalFeedback = document.getElementById("review-area-additional")

    q1slider.addEventListener("input",function(e){
        q1Output.textContent = e.target.value
    })

    q2slider.addEventListener("input",function(e){
        q2Output.textContent = e.target.value
    })
    
    q3slider.addEventListener("input",function(e){
        q3Output.textContent = e.target.value
    })

      
    feedbackSendButton.addEventListener("click",function(){

        socket.emit("feedback",{
          "page" : "dashboard",
          "question1" : q1slider.value,
          "question2" : q2slider.value,
          "question3" : q3slider.value,
          "question4" : additionalFeedback.value
      })

        reviewArea.innerHTML = "<h1>Thanks!</h1><h2>Your feedback has been submitted.</h2>"


        setTimeout(function(){
            reviewArea.style.display = "none"
            reviewButton.style.display = "none"
        },2500)

    })

    var unsuccesfulSearchMessage = document.getElementById("unsuccessful-search-message")
    
    var projectJoinInput = document.getElementById("project-join-input")
    var projectTileElements = document.getElementsByClassName("project")
    var searchMessage = document.getElementById("search-message")
    var showLiveButton = document.getElementById("show-live-button")
    var projectTiles = document.getElementById("project-tiles")
    var serverMessage = document.getElementById("server-message")
    var createProjectButton = document.getElementById("create-project-button")


    var projectJoinInputReadonly = false
    
    var projectJSON = []

    function TilesHide() {
        projectTiles.style.display = "none"
    }
    
    function TilesShow() {
        projectTiles.style.diplay = "block"
    }
    
    function CreatePlaceholderTile() {

        let placeholderTile = document.createElement("div")
        placeholderTile.classList.add("tile","darker-grey","placeholder-tile")

        let leftColourDiv = document.createElement("div")
        leftColourDiv.classList.add("tile__colour-left",RandomColour())
        placeholderTile.appendChild(leftColourDiv)

        let centerDiv = document.createElement("div")
        centerDiv.classList.add("tile__center")
        
        let topHeading = document.createElement("h2")
        topHeading.textContent = "Creating a new project"
        centerDiv.appendChild(topHeading)

        let bottomHeading = document.createElement("h3")
        bottomHeading.textContent = "This won't take long"
        centerDiv.appendChild(bottomHeading)
        placeholderTile.appendChild(centerDiv)

        let rightColourDiv = document.createElement("div")
        rightColourDiv.classList.add("tile__colour-right",RandomColour())
        placeholderTile.appendChild(rightColourDiv)

        let topColourDiv = document.createElement("div")
        topColourDiv.classList.add("tile__colour-top",RandomColour())
        placeholderTile.appendChild(topColourDiv)

        let bottomColourDiv = document.createElement("div")
        bottomColourDiv.classList.add("tile__colour-bottom",RandomColour())

        placeholderTile.appendChild(bottomColourDiv)

        projectTiles.insertBefore(placeholderTile,projectTileElements[0])

        return placeholderTile

    }

    // ######################################################################################
    // ##################################  SOCKET HANDLING ##################################
    // ######################################################################################


    //Checking if there's a server connection
    var SERVER_CONNECTION = true
    setInterval(function(){
        if (SERVER_CONNECTION) {
            SERVER_CONNECTION = false
            socket.emit("hello")
        }
        else {
            TilesHide()
            RemoveNoProjectsMessage()
            serverMessage.style.display = "block"
        }
    },5000)


    createProjectButton.addEventListener("click",function(){

        RemoveNoProjectsMessage()

        if (!currentlyCreatingProject) {
            socket.emit("project_create")
        }
    })



    socket.on("hello", function(msg){
        SERVER_CONNECTION = true
    })

    <% projects.forEach(function(project){ %>

        projectJSON.push({
            "name" : "<%= project.name %>",
            "code" : "<%= project.code %>",
            "users" : "<%= project.users %>",
            "date" : "<%= project.date %>"
        })

    <% }) %>
    socket.on("project_join_reply", function(msg) {

        if(msg.joined) {

            ResetSearch()

            RemoveNoProjectsMessage()

            projectJSON.push(msg.project)
            
            CreateProjectTile(msg.project.name,msg.project.code,msg.project.users,msg.project.date)
            projectJoinInput.classList.remove("block-text")
            projectJoinInput.style.color = "#00ff0094"
            projectJoinInput.value = "Added You To That Project"

        }
        else {

            if (msg.reason == "already") {
                projectJoinInput.classList.remove("block-text")
                projectJoinInput.style.color = "#ff9000"
                projectJoinInput.value = "Already In Project"     
            }
            else {
                projectJoinInput.classList.remove("block-text")
                projectJoinInput.style.color = "#ff9100"
                projectJoinInput.value = "Project Doesn't Exist"     
            }
        }

        setTimeout(function(){ 
            projectJoinInput.blur()
            projectJoinInput.readOnly = false
            projectJoinInputReadonly = false
            projectJoinInput.style.color = "#FFFFFF"
            projectJoinInput.value = "Join Project with Code"
        },3000)
        

    })
        

    function ShowSearchMessage() {
        searchMessage.style.display = "block"
    }

    function RemoveSearchMessage() {
        searchMessage.style.display = "none"
    }
    

    let noProjectsMessage = document.getElementById("no-projects-message")

    function ShowNoProjectsMessage() {
        noProjectsMessage.style.display = "block"
    }

    function RemoveNoProjectsMessage() {
        noProjectsMessage.style.display = "none"
    }
    
    function ResetSearch() {

        for (var i = 0; i < projectJSON.length; i++) {
            projectTileElements[(projectTileElements.length - 1) - i].classList.remove("hide")
        }
        
    

        RemoveSearchMessage()
    }

    function RandomColour() {
        let colours = ["blue","orange","green","pink","red","teal"]
        return colours[Math.floor(Math.random() * colours.length)]
    }

    function CreateProjectTile(name,code,users,date) {

        var projectTile = document.createElement("div")
        projectTile.classList.add("project","darker-grey","tile")
        
        var projectColour = document.createElement("div")
        projectColour.classList.add("project__colour")
        projectColour.classList.add(RandomColour())
        projectTile.appendChild(projectColour)

        var projectName = document.createElement("div")
        projectName.textContent = name
        .replace("&amp;","&")
        .replace("&gt;",">")
        .replace("&lt;","<")
        .replace("&#39;","'")
        .replace('&#34;','"')

        projectName.classList.add("project__name")
        projectTile.appendChild(projectName)

        var projectUsers = document.createElement("div")
        if (users == 1) {
            projectUsers.textContent = users + " user online"
        }
        else {
            projectUsers.textContent = users + " users online"
        }

        projectUsers.classList.add("project__users")
        projectTile.appendChild(projectUsers)

        var projectModified = document.createElement("div")
        projectModified.textContent = date
        projectModified.classList.add("project__modified")
        projectTile.appendChild(projectModified)
        
        var projectWorkspace = document.createElement("a")
        projectWorkspace.textContent = "Workspace"
        projectWorkspace.classList.add("project__button")
        projectWorkspace.href = "../app/" + code
        projectWorkspace.classList.add("project__workspace")
        projectTile.appendChild(projectWorkspace)

        var projectSettings = document.createElement("a")
        projectSettings.textContent = "Settings"
        projectSettings.classList.add("project__button")
        projectSettings.href = "../app/" + code + "/settings"
        projectSettings.classList.add("project__settings")
        projectTile.appendChild(projectSettings)

        var projectRemove = document.createElement("div")
        projectRemove.textContent = "Remove"
        projectRemove.classList.add("project__button")
        projectRemove.classList.add("project__remove")
        projectRemove.addEventListener("click",function(){
            projectTile.remove()
   
            socket.emit("project_remove",{
                "code" : code
            })

            for (let i = 0; i < projectJSON.length; i++) {
                if (projectJSON[i].code == code) {
                    projectJSON.splice(i,1)
                    break;
                }
            }

            if (projectJSON.length < 1) {
                ShowNoProjectsMessage()
            }

        })
        projectTile.appendChild(projectRemove)

        var projectSpaceLeft = document.createElement("div")
        var projectSpaceRight = document.createElement("div")
        projectTile.appendChild(projectSpaceLeft)
        projectTile.appendChild(projectSpaceRight)
        
        projectTiles.insertBefore(projectTile,projectTileElements[0])
        
    }
    
    projectJoinInput.addEventListener("focus",function(){
    
        projectJoinInput.value = ""
        projectJoinInput.classList.add("block-text")
    })

    projectJoinInput.addEventListener("blur",function(){
        projectJoinInput.value = "Join Project with Code"
        projectJoinInput.classList.remove("block-text")
        projectJoinInput.style.color = "#FFFFFF"
    })

    var HTMLparser = new DOMParser().parseFromString("{{ projects }}", "text/html")

    projectJSON.forEach(function(project){
        CreateProjectTile(project.name, project.code, project.users, project.date)
    })

    var projectSearchInput = document.getElementById("project-search-input")
    projectSearchInput.addEventListener("keyup",function(e){

        if (projectJSON.length < 1) {
            ShowNoProjectsMessage()
        }
        else {

            RemoveSearchMessage()

            let searchSuccess = false


            for (var i = 0; i < projectJSON.length; i++) {
                
                let lowerProjectName = projectJSON[i].name.toLowerCase()
                let lowerSearchText = e.target.value.toLowerCase()
        
                if (lowerProjectName.includes(lowerSearchText)) {
                    searchSuccess = true
                    projectTileElements[(projectTileElements.length - 1) - i].classList.remove("hide")
                }
                else {
                    projectTileElements[(projectTileElements.length - 1) - i].classList.add("hide")
                }
            }

            if (!searchSuccess) {
                ShowSearchMessage()
            }

        }
    })

    projectSearchInput.addEventListener("focus",function(){
        projectSearchInput.value = ""
    })

    projectSearchInput.addEventListener("blur",function(){
        projectSearchInput.value = "Search Projects"
    })


    projectJoinInput.addEventListener("keydown",function(e){

        e.preventDefault()


        if (e.keyCode == 8) {
            e.target.value = e.target.value.substring(0,e.target.value.length - 1)
        }

        if ((e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 64 && e.keyCode < 91)) {
     
            if (e.target.value.length < 8 && !projectJoinInputReadonly) {
                e.target.value += String.fromCharCode(e.keyCode)
            }
        }
  
        if (e.target.value.length == 8) {
            let code = e.target.value
            projectJoinInput.classList.remove("block-text")
            projectJoinInput.value = "Checking If Class Exists"
            projectJoinInput.readOnly = "true"
            projectJoinInputReadonly = true
            projectJoinInput.style.color = "#00EEAA"

            socket.emit("project_join",{
                "code" : code
            })

        }
        else {

            if (!projectJoinInputReadonly) {
                projectJoinInput.style.color = "#FFFFFF"
            }
        }
         
    })
    
  


    var currentlyCreatingProject = false


    
    var progressBarImage = document.getElementById("progress-image")

    function ProgressBarShow() {
        progressBarImage.style.display = "block"
    }

    function ProgressBarHide() {
        progressBarImage.style.display = "none"
    }

    var placeholderTile;

    createProjectButton.addEventListener("click",function(){

        if (!currentlyCreatingProject) {
            
            ResetSearch()

            currentlyCreatingProject = true
            placeholderTile = CreatePlaceholderTile()
            
            ProgressBarShow()
        }
    })


    
    if (projectJSON.length < 1) {
        ShowNoProjectsMessage()
    }


      



    var liveProjectsToggle = false

    showLiveButton.addEventListener("click",function(){


        ResetSearch()

        if (!liveProjectsToggle) {
            for (var i = 0; i < projectJSON.length; i++) {
     
                if (projectJSON[i].users > 0) {
                    projectTileElements[(projectTileElements.length - 1) - i].classList.remove("hide")
                }
                else {
                    projectTileElements[(projectTileElements.length - 1) - i].classList.add("hide")
                }
            }

            liveProjectsToggle = true
            showLiveButton.textContent = "Show All Projects"
        }
        else {

            ResetSearch()
            liveProjectsToggle = false
            showLiveButton.textContent = "Show Live Projects"

        }
        


    })




    socket.on("project_create_reply", function(msg) {
        projectJSON.push(msg)
        
        setTimeout(function(){

            CreateProjectTile(msg.name,msg.code,msg.users,msg.date)
            
            ProgressBarHide()
    
            //Send message
    
            placeholderTile.remove()



        },700)

        setTimeout(function(){
            currentlyCreatingProject = false
        },2000)


    })


</script>


</body>
</html>